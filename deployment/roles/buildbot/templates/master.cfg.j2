# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import os
buildbot_path = os.path.dirname(os.path.abspath(__file__))

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("slave1", "password1")]

c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        '{{ project_repo }}',
        workdir='gitpoller-workdir', branch='{{ branch }}',
        pollinterval=120))

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='{{ branch }}'),
                            treeStableTimer=None,
                            builderNames=["ansiblerun"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["ansiblerun"]))

####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand

venv_path = os.path.join(buildbot_path, "{{ project_venv }}")
ansible_path = os.path.join(buildbot_path, "{{ project_code }}/deployment")

factory = BuildFactory()
factory.addStep(
    ShellCommand(command=[
                    os.path.join(venv_path, "bin/ansible-playbook"),
                    "-c",
                    "local",
                    "-i",
                    os.path.join(ansible_path, "local"),
                    os.path.join(ansible_path, "webservers.yml")
                ])
)

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="ansiblerun",
      slavenames=["slave1"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("{{ project_name }}","{{ project_name }}")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "{{ project_name }}"
c['titleURL'] = "http://{{ server_name }}"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
